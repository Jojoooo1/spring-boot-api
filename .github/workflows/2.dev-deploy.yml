name: "Dev - Deploy to Dev"

# Note: Execute when feature branch is merge into develop this CI will be executed.

on:
  pull_request:
    types: [ closed ]
    branches: [ develop ]

env:
  #  PROJECT_ID: <YOUR-PROJECT-ID>
  #  PROJECT_SA_KEY: ${{ secrets.YOUR_SECRET_SA }}
  REPO_HOST: docker.io
  REPO_NAME: jojoooo1
  IMAGE_NAME: api

concurrency:
  group: ci-deploy-dev-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dev-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      IMAGE_TAG: ${{ steps.variables.outputs.IMAGE_TAG }}
      IMAGE_REGISTRY: ${{ steps.variables.outputs.IMAGE_REGISTRY }}
    steps:

      # 1. Setup
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: 'liberica'
          java-version: '21'
          cache: 'maven'

      # 2. Setup registry
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REPO_NAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # 2.1. Setup gcloud
      #      - id: auth
      #        uses: google-github-actions/auth@v1.1.1
      #        with:
      #          credentials_json: ${{ env.PROJECT_SA_KEY }}
      #
      #      - name: Set up Cloud SDK
      #        uses: google-github-actions/setup-gcloud@v1.1.1
      #        with:
      #          project_id: ${{ env.PROJECT_ID }}

      # 2.2 Configure docker to use gcloud as a credential helper
      #      - name: Setup docker to authenticate via gcloud
      #        run: gcloud --quiet  auth configure-docker us-docker.pkg.dev

      # 3. Echo ENV_VARIABLE
      - name: echo ENV_VARIABLE
        id: variables
        run: |
          IMAGE_REGISTRY="${{ env.REPO_HOST }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}"
          IMAGE_TAG="dev-${{ github.run_number }}"

          # Echo variables
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"
          echo "IMAGE_TAG=$IMAGE_TAG"

          # Set variables in env & output
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY}" >> $GITHUB_OUTPUT

      # 4. Push to image registry
      - name: Deploy image with spring-boot-maven-plugin (using buildpack)
        run: |
          mvn clean package -DskipTests spring-boot:build-image --no-transfer-progress \
            -Dspring-boot.build-image.imageName=$IMAGE_REGISTRY:$IMAGE_TAG
          
          docker push $IMAGE_REGISTRY:$IMAGE_TAG

      #Â 5. Notify if fails